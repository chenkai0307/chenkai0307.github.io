import{_ as p,c,a as d,b as t,e as l,d as s,w as a,r,o as g}from"./app-DOxdg6qY.js";const u={},y={style:{"text-align":"left"}},x={href:"https://www.runoob.com/sql/func-now.html",target:"_blank",rel:"noopener noreferrer"},f={style:{"text-align":"left"}},h={href:"https://www.runoob.com/sql/func-curdate.html",target:"_blank",rel:"noopener noreferrer"},m={style:{"text-align":"left"}},k={href:"https://www.runoob.com/sql/func-curtime.html",target:"_blank",rel:"noopener noreferrer"},v={style:{"text-align":"left"}},b={href:"https://www.runoob.com/sql/func-date.html",target:"_blank",rel:"noopener noreferrer"},L={style:{"text-align":"left"}},w={href:"https://www.runoob.com/sql/func-extract.html",target:"_blank",rel:"noopener noreferrer"},S={style:{"text-align":"left"}},E={href:"https://www.runoob.com/sql/func-date-add.html",target:"_blank",rel:"noopener noreferrer"},q={style:{"text-align":"left"}},T={href:"https://www.runoob.com/sql/func-date-sub.html",target:"_blank",rel:"noopener noreferrer"},M={style:{"text-align":"left"}},_={href:"https://www.runoob.com/sql/func-datediff-mysql.html",target:"_blank",rel:"noopener noreferrer"},N={style:{"text-align":"left"}},I={href:"https://www.runoob.com/sql/func-date-format.html",target:"_blank",rel:"noopener noreferrer"},A={style:{"text-align":"left"}},U={href:"https://www.runoob.com/sql/func-getdate.html",target:"_blank",rel:"noopener noreferrer"},O={style:{"text-align":"left"}},D={href:"https://www.runoob.com/sql/func-datepart.html",target:"_blank",rel:"noopener noreferrer"},Q={style:{"text-align":"left"}},C={href:"https://www.runoob.com/sql/func-dateadd.html",target:"_blank",rel:"noopener noreferrer"},R={style:{"text-align":"left"}},Y={href:"https://www.runoob.com/sql/func-datediff.html",target:"_blank",rel:"noopener noreferrer"},P={style:{"text-align":"left"}},B={href:"https://www.runoob.com/sql/func-convert.html",target:"_blank",rel:"noopener noreferrer"},F={class:"custom-container tip"},V={href:"https://www.runoob.com/sql/sql-datatypes.html",target:"_blank",rel:"noopener noreferrer"};function j(H,e){const n=r("ExternalLinkIcon"),i=r("CodeGroupItem"),o=r("CodeGroup");return g(),c("div",null,[e[42]||(e[42]=d(`<img src="https://roaringelephant.org/wp-content/uploads/sites/5/2016/03/SQL.jpg" alt="SQL" height="300"><h2 id="sql-视图-views" tabindex="-1"><a class="header-anchor" href="#sql-视图-views"><span>SQL 视图（Views）</span></a></h2><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>视图是可视化的表。</p></div><h3 id="_1-sql-create-view-语句" tabindex="-1"><a class="header-anchor" href="#_1-sql-create-view-语句"><span>1 SQL CREATE VIEW 语句</span></a></h3><p>在 SQL 中，视图是基于 SQL 语句的额结果集的可视化的表。</p><p>视图包含行和列，就像一个真实的表。视图中的字段就是来自一个或多个数据库中的真实的表中的字段。</p><p>你可以向视图添加 SQL 函数、WHERE 以及 JOIN 语句，也可以呈现数据，就像这些数据来自于某个单一的表一样。</p><p><strong>SQL CREATE VIEW 语法</strong></p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> view_name <span class="token keyword">AS</span></span>
<span class="line"><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span>column2<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token keyword">FROM</span> table_name</span>
<span class="line"><span class="token keyword">WHERE</span> condition<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>参数说明</strong>：</p><ul><li><code>CREATE VIEW</code>：声明你要创建一个视图。</li><li><code>view_name</code>：指定视图的名称</li><li><code>AS</code>：指定关键字，表示视图的定义开始。</li><li><code>SELECT column1,column2,...</code>：指定视图中包含的列，可以是表中的列或计算列。</li><li><code>FROM table_name</code>：指定视图从哪个表中获取数据。</li><li><code>WHERE condition</code>：可选部分，用于指定筛选条件，限制视图中的行。</li></ul><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p><strong>注释</strong>：视图总是显示最新的数据！每当用户查询视图时，数据库引擎通过使用视图的 SQL 语句重建数据。</p></div><h3 id="_2-sql-create-view-实例" tabindex="-1"><a class="header-anchor" href="#_2-sql-create-view-实例"><span>2 SQL CREATE VIEW 实例</span></a></h3><p>假设你有一个包含员工信息的表 employees，包括以下列：employee_id、first_name、last_name、satary 和 department_id，现在，我们将创建一个视图，显示工资高于某个阈值的员工信息。</p><p>实例如下：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 创建包含高工资员工信息的视图</span></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> hign_salary_employees <span class="token keyword">AS</span></span>
<span class="line"><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>first_name<span class="token punctuation">,</span>last_name<span class="token punctuation">,</span>salary</span>
<span class="line"><span class="token keyword">FROM</span> employees</span>
<span class="line"><span class="token keyword">WHERE</span> salary <span class="token operator">&gt;</span> <span class="token number">50000</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们创建了一个名为 hign_salary_employees 的视图，该视图包含了那些工资高于 50000 的员工的信息。</p><p>现在，你可以像查询普通表一样使用这个视图：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 查询高工资员工视图</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span></span>
<span class="line"><span class="token keyword">FROM</span> high_salary_employees<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这将返回所有工资高于 50000 的员工的详细信息，而不需要每次都填写相同的筛选条件。</p><p>值得注意的是，视图本质上是一个虚拟的表，它并不存储数据，而是基于基础表的查询结果生成。因此，如果基础表的数据发生变化，视图的内容也会相应地更新。</p><h3 id="_3-sql-更新视图" tabindex="-1"><a class="header-anchor" href="#_3-sql-更新视图"><span>3 SQL 更新视图</span></a></h3><p>在 SQL 中，你不能直接使用 UPDATE 语句来更新视图，因为视图是基于查询结果生成的虚拟表，而不是实际存储数据的表。</p><p>更新视图的实质是通过更新视图所基于的表中的数据，然后视图会反映这些变化。</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">UPDATE</span> table_name</span>
<span class="line"><span class="token keyword">SET</span> column1 <span class="token operator">=</span> value1<span class="token punctuation">,</span>column2 <span class="token operator">=</span> value2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token keyword">WHERE</span> condition<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 table_name 是基础表的名称，<code>column1,column2,...</code>是要更新的列，<code>value1,value2,...</code> 是新的值，condition 是更新的条件。</p><p>现在，我们希望向 <code>Current Product List</code> 视图添加 Category 列。我们将通过下列 SQL 更新视图：</p><p>举例来说，如果你有一个名为 high_salary_employees 的视图，显示工资高于 50000 的员工信息，而这个视图基于 employees 表的查询结果，你可以通过以下步骤来更新数据：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 步骤 1：更新 employees 表中的数据</span></span>
<span class="line"><span class="token keyword">UPDATE</span> employees</span>
<span class="line"><span class="token keyword">SET</span> salary <span class="token operator">=</span> <span class="token number">60000</span></span>
<span class="line"><span class="token keyword">WHERE</span> employee_id <span class="token operator">=</span> <span class="token number">1001</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 步骤 2：查询更新后的高工资员工视图</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span></span>
<span class="line"><span class="token keyword">FROM</span> high_salary_employees<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，你更新了 employees 表中的数据，而视图 high_salary_employees 将反映出这些变化。</p><h3 id="_4-sql-撤销视图" tabindex="-1"><a class="header-anchor" href="#_4-sql-撤销视图"><span>4 SQL 撤销视图</span></a></h3><p>在 SQL 中，撤销（或删除）视图是通过使用 DROP VIEW 语句来实现。</p><p>DROP VIEW 语句用于从数据库中删除一个已存在的视图。语法如下：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">DROP</span> <span class="token keyword">VIEW</span> <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> view_name<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>参数说明</strong>：</p><ul><li><code>DROP VIEW</code>：表示你要删除一个视图。</li><li><code>IF EXISTS</code>：可选部分，用于检查视图是否存在。如果存在，则执行删除操作；如果不存在，不会发生错误。在某些数据库系统中，这是可选的。</li><li><code>view_name</code>：指定要删除的视图的名称。</li></ul><p>在执行以下语句后，视图 high_salary_employees 将被从数据库中删除。</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 删除名为 high_salary_employees 的视图</span></span>
<span class="line"><span class="token keyword">DROP</span> <span class="token keyword">VIEW</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> high_salary_employees<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，这并不影响基础表中的数据，只是删除了视图的定义。</p><p>如果你需要撤销或删除某个表中的数据，应该使用 DROP TABLE 语句。</p><p>在使用 DROP VIEW 语句时，请确保你真的想要删除该视图，因为一旦删除，将无法恢复视图的定义。</p><h2 id="sql-date-函数" tabindex="-1"><a class="header-anchor" href="#sql-date-函数"><span>SQL Date 函数</span></a></h2><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p><strong>SQL 日期（Dates）</strong></p><p>💡当我们处理日期时，最难的任务恐怕是确保所插入的日期的格式，与数据库中日期列的格式相匹配。</p><p>只要你的数据包含的只是日期部分，运行查询就不会出现问题。但是，如果涉及时间部分，情况就有点复杂了。</p><p>在讨论日期查询的复杂性之前，我们先来看看最重要的内建日期处理函数。</p></div><h3 id="_1-mysql-date-函数" tabindex="-1"><a class="header-anchor" href="#_1-mysql-date-函数"><span>1 MySQL Date 函数</span></a></h3><p>下面的表格列出了 MySQL 中最重要的内建日期函数：</p>`,45)),t("table",null,[e[18]||(e[18]=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"函数"),t("th",{style:{"text-align":"left"}},"描述")])],-1)),t("tbody",null,[t("tr",null,[t("td",y,[t("a",x,[e[0]||(e[0]=s("NOW()",-1)),l(n)])]),e[1]||(e[1]=t("td",{style:{"text-align":"left"}},"返回当前的日期和时间",-1))]),t("tr",null,[t("td",f,[t("a",h,[e[2]||(e[2]=s("CURDATE()",-1)),l(n)])]),e[3]||(e[3]=t("td",{style:{"text-align":"left"}},"返回当前的日期",-1))]),t("tr",null,[t("td",m,[t("a",k,[e[4]||(e[4]=s("CURTIME()",-1)),l(n)])]),e[5]||(e[5]=t("td",{style:{"text-align":"left"}},"返回当前的时间",-1))]),t("tr",null,[t("td",v,[t("a",b,[e[6]||(e[6]=s("DATE()",-1)),l(n)])]),e[7]||(e[7]=t("td",{style:{"text-align":"left"}},"提取日期或日期/时间表达式的日期部分",-1))]),t("tr",null,[t("td",L,[t("a",w,[e[8]||(e[8]=s("EXTRACT()",-1)),l(n)])]),e[9]||(e[9]=t("td",{style:{"text-align":"left"}},"返回日期/时间的单独部分",-1))]),t("tr",null,[t("td",S,[t("a",E,[e[10]||(e[10]=s("DATE_ADD()",-1)),l(n)])]),e[11]||(e[11]=t("td",{style:{"text-align":"left"}},"向日期添加指定的时间间隔",-1))]),t("tr",null,[t("td",q,[t("a",T,[e[12]||(e[12]=s("DATE_SUB()",-1)),l(n)])]),e[13]||(e[13]=t("td",{style:{"text-align":"left"}},"从日期减去指定的时间间隔",-1))]),t("tr",null,[t("td",M,[t("a",_,[e[14]||(e[14]=s("DATEDIFF()",-1)),l(n)])]),e[15]||(e[15]=t("td",{style:{"text-align":"left"}},"返回两个日期之间的天数",-1))]),t("tr",null,[t("td",N,[t("a",I,[e[16]||(e[16]=s("DATE_FORMAT()",-1)),l(n)])]),e[17]||(e[17]=t("td",{style:{"text-align":"left"}},"用不同的格式显示日期/时间",-1))])])]),e[43]||(e[43]=t("h3",{id:"_2-sql-server-date-函数",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_2-sql-server-date-函数"},[t("span",null,"2 SQL Server Date 函数")])],-1)),e[44]||(e[44]=t("p",null,"下面的表格列出了 SQL Server 中最重要的内建日期函数：",-1)),t("table",null,[e[29]||(e[29]=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"函数"),t("th",{style:{"text-align":"left"}},"描述")])],-1)),t("tbody",null,[t("tr",null,[t("td",A,[t("a",U,[e[19]||(e[19]=s("GETDATE()",-1)),l(n)])]),e[20]||(e[20]=t("td",{style:{"text-align":"left"}},"返回当前的日期和时间",-1))]),t("tr",null,[t("td",O,[t("a",D,[e[21]||(e[21]=s("DATEPART()",-1)),l(n)])]),e[22]||(e[22]=t("td",{style:{"text-align":"left"}},"返回日期/时间的单独部分",-1))]),t("tr",null,[t("td",Q,[t("a",C,[e[23]||(e[23]=s("DATEADD()",-1)),l(n)])]),e[24]||(e[24]=t("td",{style:{"text-align":"left"}},"在日期中添加或减去指定的时间间隔",-1))]),t("tr",null,[t("td",R,[t("a",Y,[e[25]||(e[25]=s("DATEDIFF()",-1)),l(n)])]),e[26]||(e[26]=t("td",{style:{"text-align":"left"}},"返回两个日期之间的时间",-1))]),t("tr",null,[t("td",P,[t("a",B,[e[27]||(e[27]=s("CONVERT()",-1)),l(n)])]),e[28]||(e[28]=t("td",{style:{"text-align":"left"}},"用不同的格式显示日期/时间",-1))])])]),e[45]||(e[45]=d('<h3 id="_3-sql-date-数据类型" tabindex="-1"><a class="header-anchor" href="#_3-sql-date-数据类型"><span>3 SQL Date 数据类型</span></a></h3><p><code>MySQL</code> 使用下列数据类型在数据库中存储日期或日期/时间值：</p><ul><li><code>DATE</code> - 格式：<code>YYYY-MM-DD</code></li><li><code>DATETIME</code> - 格式：<code>YYYY-MM-DD HH:MM:SS</code></li><li><code>TIMESTAMP</code> - 格式：<code>YYYY-MM-DD HH:MM:SS</code></li><li><code>YEAR</code> - 格式：<code>YYYY</code> 或 <code>YY</code></li></ul><p><code>SQL Server</code> 使用下列数据类型在数据库中存储日期或日期/时间值：</p><ul><li><code>DATE</code> - 格式：<code>YYYY-MM-DD</code></li><li><code>DATETIME</code> - 格式：<code>YYYY-MM-DD HH:MM:SS</code></li><li><code>SMALLDATETIME</code> - 格式：<code>YYYY-MM-DD HH:MM:SS</code></li><li><code>TIMESTAMP</code> - 格式：唯一的数字</li></ul>',5)),t("div",F,[e[33]||(e[33]=d('<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p>',2)),t("p",null,[e[31]||(e[31]=t("strong",null,"注释",-1)),e[32]||(e[32]=s("：当你在数据库中创建一个新表时，需要为列选择数据类型！",-1)),t("a",V,[e[30]||(e[30]=s("数据类型参考手册",-1)),l(n)])])]),e[46]||(e[46]=d(`<h3 id="_4-sql-日期处理" tabindex="-1"><a class="header-anchor" href="#_4-sql-日期处理"><span>4 SQL 日期处理</span></a></h3><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>💡如果不涉及时间部分，那么我们可以轻松地比较两个日期！</p></div><p>假设我们有如下 <code>Orders</code> 表：</p><table><thead><tr><th style="text-align:left;">OrderId</th><th style="text-align:left;">ProductName</th><th style="text-align:left;">OrderDate</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;">Geitost</td><td style="text-align:left;">2008-11-11</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;">Camembert Pierrot</td><td style="text-align:left;">2008-11-09</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;">Mozzarella di Giovanni</td><td style="text-align:left;">2008-11-11</td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;">Mascarpone Fabioli</td><td style="text-align:left;">2008-10-29</td></tr></tbody></table><p>现在，我们希望从上表中选取 <code>OrderDate</code> 为 <code>2008-11-11</code> 的记录。</p><p>我们使用下面的 SELECT 语句：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Orders <span class="token keyword">WHERE</span> OrderDate<span class="token operator">=</span><span class="token string">&#39;2008-11-11&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>结果集如下所示：</p><table><thead><tr><th style="text-align:left;">OrderId</th><th style="text-align:left;">ProductName</th><th style="text-align:left;">OrderDate</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;">Geitost</td><td style="text-align:left;">2008-11-11</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;">Mozzarella di Giovanni</td><td style="text-align:left;">2008-11-11</td></tr></tbody></table><p>现在，假设 Orders 表如下所示（请注意 OrderDate 列中的时间部分）：</p><table><thead><tr><th style="text-align:left;">OrderId</th><th style="text-align:left;">ProductName</th><th style="text-align:left;">OrderDate</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;">Geitost</td><td style="text-align:left;">2008-11-11 13:23:44</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;">Camembert Pierrot</td><td style="text-align:left;">2008-11-09 15:45:21</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;">Mozzarella di Giovanni</td><td style="text-align:left;">2008-11-11 11:12:01</td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;">Mascarpone Fabioli</td><td style="text-align:left;">2008-10-29 14:56:59</td></tr></tbody></table><p>如果我们使用和上面一样的 SELECT 语句：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Orders <span class="token keyword">WHERE</span> OrderDate<span class="token operator">=</span><span class="token string">&#39;2008-11-11&#39;</span><span class="token punctuation">;</span></span>
<span class="line">或</span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Orders <span class="token keyword">WHERE</span> OrderDate<span class="token operator">=</span><span class="token string">&#39;2008-11-11 00:00:00&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么我们将得不到结果！因为表中没有 <code>2008-11-11 00:00:00</code> 日期。如果没有时间部分，默认时间为 00:00:00。</p><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p><strong>提示</strong>：如果你希望使查询简单且更易维护，那么请不要在日期中使用时间部分！</p></div><h2 id="sql-null-值" tabindex="-1"><a class="header-anchor" href="#sql-null-值"><span>SQL NULL 值</span></a></h2><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>NULL 值代表遗漏的未知数据。</p><p>默认地，表的列可以存放 NULL 值。</p></div><h3 id="_1-sql-null-值" tabindex="-1"><a class="header-anchor" href="#_1-sql-null-值"><span>1 SQL NULL 值</span></a></h3><p>如果表中的某个列是可选的，那么我们可以在不向该列添加值得情况下插入新纪录或更新已有得记录。这意味着该字段将以 NULL 值保存。</p><p>NULL 值得处理方式与其他值不同。</p><p>NULL 用作未知的或不适用的值的占位符。</p><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>💡注释：无法比较 NULL 和 0；他们是不等价的。</p></div><h3 id="_2-sql-的-null-值处理" tabindex="-1"><a class="header-anchor" href="#_2-sql-的-null-值处理"><span>2 SQL 的 NULL 值处理</span></a></h3><p>请看下面的 Persons 表：</p><table><thead><tr><th style="text-align:left;">P_Id</th><th style="text-align:left;">LastName</th><th style="text-align:left;">FirstName</th><th style="text-align:left;">Address</th><th style="text-align:left;">City</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;">Hansen</td><td style="text-align:left;">Ola</td><td style="text-align:left;"></td><td style="text-align:left;">Sandnes</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;">Svendson</td><td style="text-align:left;">Tove</td><td style="text-align:left;">Borgvn 23</td><td style="text-align:left;">Sandnes</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;">Pettersen</td><td style="text-align:left;">Kari</td><td style="text-align:left;"></td><td style="text-align:left;">Stavanger</td></tr></tbody></table><p>假如 Persons 表中的 Address 列是可选的。这意味着如果在 Address 列插入一条不带值得记录，&quot;Address&quot; 列会使用 NULL 值保存。</p><p>那么我们如何测试 NULL 值呢？</p><p>无法使用比较运算符来测试 NULL 值，比如=、&lt; 或 &lt;&gt;</p><p>我们必须使用 IS NULL 和 IS NOT NULL 操作符。</p><h3 id="_3-sql-is-null" tabindex="-1"><a class="header-anchor" href="#_3-sql-is-null"><span>3 SQL IS NULL</span></a></h3><p>我们如何仅仅选取在 Address 列中带有 NULL 值的记录呢？</p><p>我们必须使用 IS NULL 操作符：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SELECT</span> LastName<span class="token punctuation">,</span>FirstName<span class="token punctuation">,</span>Address <span class="token keyword">FROM</span> Persons</span>
<span class="line"><span class="token keyword">WHERE</span> Address <span class="token operator">IS</span> <span class="token boolean">NULL</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>结果集如下所示：</p><table><thead><tr><th style="text-align:left;">LastName</th><th style="text-align:left;">FirstName</th><th style="text-align:left;">Address</th></tr></thead><tbody><tr><td style="text-align:left;">Hansen</td><td style="text-align:left;">Ola</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">Pettersen</td><td style="text-align:left;">Kari</td><td style="text-align:left;"></td></tr></tbody></table><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>💡<strong>提示</strong>：请始终使用 IS NULL 来查找 NULL 值。</p></div><h3 id="_4-sql-is-not-null" tabindex="-1"><a class="header-anchor" href="#_4-sql-is-not-null"><span>4 SQL IS NOT NULL</span></a></h3><p>我们如何仅仅选取在 Address 列中不带有 NULL 值得记录呢？</p><p>我们必须使用 IS NOT NULL 操作符：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SELECT</span> LastName<span class="token punctuation">,</span>FirstName<span class="token punctuation">,</span>Address <span class="token keyword">FROM</span> Persons</span>
<span class="line"><span class="token keyword">WHERE</span> Address <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>结果集如下所示：</p><table><thead><tr><th style="text-align:left;">LastName</th><th style="text-align:left;">FirstName</th><th style="text-align:left;">Address</th></tr></thead><tbody><tr><td style="text-align:left;">Svendson</td><td style="text-align:left;">Tove</td><td style="text-align:left;">Borgvn 23</td></tr></tbody></table><h2 id="sql-null-函数" tabindex="-1"><a class="header-anchor" href="#sql-null-函数"><span>SQL NULL 函数</span></a></h2><h3 id="sql-isnull-、nvl-、ifnull-和-coalesce-函数" tabindex="-1"><a class="header-anchor" href="#sql-isnull-、nvl-、ifnull-和-coalesce-函数"><span>SQL ISNULL()、NVL()、IFNULL() 和 COALESCE() 函数</span></a></h3><p>请看下面得 Products 表：</p><table><thead><tr><th style="text-align:left;">P_Id</th><th style="text-align:left;">ProductName</th><th style="text-align:left;">UnitPrice</th><th style="text-align:left;">UnitsInStock</th><th style="text-align:left;">UnitsOnOrder</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;">Jarlsberg</td><td style="text-align:left;">10.45</td><td style="text-align:left;">16</td><td style="text-align:left;">15</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;">Mascarpone</td><td style="text-align:left;">32.56</td><td style="text-align:left;">23</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;">Gorgonzola</td><td style="text-align:left;">15.67</td><td style="text-align:left;">9</td><td style="text-align:left;">20</td></tr></tbody></table><p>假如 UnitsOnOrder 是可选的，而且可以包含 NULL 值。</p><p>我们使用下面的 SELECT 语句：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SELECT</span> ProductName<span class="token punctuation">,</span>UnitPrice<span class="token operator">*</span><span class="token punctuation">(</span>UnitsInstock<span class="token operator">+</span>UnitsOnOrder<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">FROM</span> Products<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的实例中，如果有 UnitsOnOrder 值是 NULL，那么结果是 NULL。</p><p>微软的 ISNULL() 函数用于规定如何处理 NULL 值。</p><p>NVL()、IFNUL() 和 COALESCE() 函数也可以达到相同的结果。</p><p>在这里，我们希望 NULL 值为 0 。</p><p>下面，如果 UnitsOnOrder 是 NULL，则不会影响计算，因为如果值是 NULL 则 ISNULL() 返回 0 。</p><p><strong>① SQL Server / MS Access</strong></p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SELECT</span> ProductName<span class="token punctuation">,</span>UnitPrice<span class="token operator">*</span><span class="token punctuation">(</span>UnitsInStock<span class="token operator">+</span>ISNULL<span class="token punctuation">(</span>UnitsOnOrder<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">FROM</span> Products<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>② Oracle</strong></p><p>Oracle 没有 ISNULL() 函数。不过，我们可以使用 NVL() 函数达到相同的结果：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SELECT</span> ProductName<span class="token punctuation">,</span>UnitPrice<span class="token operator">*</span><span class="token punctuation">(</span>UnitsInstock<span class="token operator">+</span>NVL<span class="token punctuation">(</span>UnitsOnOrder<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">FROM</span> Products<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>③ MySQL</strong></p><p>MySQL 也拥有类似 ISNULL() 函数。不过，他们的工作方式与微软的 ISNULL() 函数有点不同。</p><p>在 MySQL 中，我们可以使用 IFNULL() 函数，如下所示：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SELECT</span> PriductName<span class="token punctuation">,</span>UnitPrice<span class="token operator">*</span><span class="token punctuation">(</span>UnitsInStock<span class="token operator">+</span>IFNULL<span class="token punctuation">(</span>UnitsOnOrder<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">FROM</span> Products<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>或者我们可以使用 COALESCES() 函数，如下所示：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SELECT</span> ProductName<span class="token punctuation">,</span>UnitPrice<span class="token operator">*</span><span class="token punctuation">(</span>UnitsInStock<span class="token operator">+</span><span class="token keyword">COALESCE</span><span class="token punctuation">(</span>UnitsOnOrder<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">FROM</span> Products<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sql-通用数据类型" tabindex="-1"><a class="header-anchor" href="#sql-通用数据类型"><span>SQL 通用数据类型</span></a></h2><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>数据类型定义列中存放的值的种类。</p></div><h3 id="_1-sql-通用数据类型" tabindex="-1"><a class="header-anchor" href="#_1-sql-通用数据类型"><span>1 SQL 通用数据类型</span></a></h3><p>数据库表中的每个列都要求有名称和数据类型。</p><p><code>Each column in a database table is required to have a name and a data type.</code></p><p>SQL 开发人员必须在创建 SQL 表时决定表中每个列将要存储的数据的类型。数据类型是一个标签，是便于 SQL 了解每个列期望存储什么类型的数据的指南，它也标识了 SQL 如何与存储的数据进行交互。</p><p>下面的表格列出了 SQL 中通用的数据类型：</p><table><thead><tr><th style="text-align:left;">数据类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">CHARACTER(n)</td><td style="text-align:left;">字符/字符串。固定长度 n。</td></tr><tr><td style="text-align:left;">VARCHAR(n) 或 CHARACTER VARYING(n)</td><td style="text-align:left;">字符/字符串。可变长度。最大长度 n。</td></tr><tr><td style="text-align:left;">BINARY(n)</td><td style="text-align:left;">二进制串。固定长度 n。</td></tr><tr><td style="text-align:left;">BOOLEAN</td><td style="text-align:left;">存储 TRUE 或 FALSE 值</td></tr><tr><td style="text-align:left;">VARBINARY(n) 或 BINARY VARYING(n)</td><td style="text-align:left;">二进制串。可变长度。最大长度 n。</td></tr><tr><td style="text-align:left;">INTEGER(p)</td><td style="text-align:left;">整数值（没有小数点）。精度 p。</td></tr><tr><td style="text-align:left;">SMALLINT</td><td style="text-align:left;">整数值（没有小数点）。精度 5。</td></tr><tr><td style="text-align:left;">INTEGER</td><td style="text-align:left;">整数值（没有小数点）。精度 10。</td></tr><tr><td style="text-align:left;">BIGINT</td><td style="text-align:left;">整数值（没有小数点）。精度 19。</td></tr><tr><td style="text-align:left;">DECIMAL(p,s)</td><td style="text-align:left;">精确数值，精度 p，小数点后位数 s。例如：decimal(5,2) 是一个小数点前有 3 位数，小数点后有 2 位数的数字。</td></tr><tr><td style="text-align:left;">NUMERIC(p,s)</td><td style="text-align:left;">精确数值，精度 p，小数点后位数 s。（与 DECIMAL 相同）</td></tr><tr><td style="text-align:left;">FLOAT(p)</td><td style="text-align:left;">近似数值，尾数精度 p。一个采用以 10 为基数的指数计数法的浮点数。该类型的 size 参数由一个指定最小精度的单一数字组成。</td></tr><tr><td style="text-align:left;">REAL</td><td style="text-align:left;">近似数值，尾数精度 7。</td></tr><tr><td style="text-align:left;">FLOAT</td><td style="text-align:left;">近似数值，尾数精度 16。</td></tr><tr><td style="text-align:left;">DOUBLE PRECISION</td><td style="text-align:left;">近似数值，尾数精度 16。</td></tr><tr><td style="text-align:left;">DATE</td><td style="text-align:left;">存储年、月、日的值。</td></tr><tr><td style="text-align:left;">TIME</td><td style="text-align:left;">存储小时、分、秒的值。</td></tr><tr><td style="text-align:left;">TIMESTAMP</td><td style="text-align:left;">存储年、月、日、小时、分、秒的值。</td></tr><tr><td style="text-align:left;">INTERVAL</td><td style="text-align:left;">由一些整数字段组成，代表一段时间，取决于区间的类型。</td></tr><tr><td style="text-align:left;">ARRAY</td><td style="text-align:left;">元素的固定长度的有序集合</td></tr><tr><td style="text-align:left;">MULTISET</td><td style="text-align:left;">元素的可变长度的无序集合</td></tr><tr><td style="text-align:left;">XML</td><td style="text-align:left;">存储 XML 数据</td></tr></tbody></table><h3 id="_2-sql-数据类型快速参考手册" tabindex="-1"><a class="header-anchor" href="#_2-sql-数据类型快速参考手册"><span>2 SQL 数据类型快速参考手册</span></a></h3><p>然而，不同的数据库对数据类型定义提供不同的选择。</p><p>下面的表格显示了各种不同数据库平台上一些数据类型的通用名称：</p><table><thead><tr><th style="text-align:left;">数据类型</th><th style="text-align:left;">Access</th><th style="text-align:left;">SQLServer</th><th style="text-align:left;">Oracle</th><th style="text-align:left;">MySQL</th><th style="text-align:left;">PostgreSQL</th></tr></thead><tbody><tr><td style="text-align:left;"><em>boolean</em></td><td style="text-align:left;">Yes/No</td><td style="text-align:left;">Bit</td><td style="text-align:left;">Byte</td><td style="text-align:left;">N/A</td><td style="text-align:left;">Boolean</td></tr><tr><td style="text-align:left;"><em>integer</em></td><td style="text-align:left;">Number (integer)</td><td style="text-align:left;">Int</td><td style="text-align:left;">Number</td><td style="text-align:left;">Int Integer</td><td style="text-align:left;">Int Integer</td></tr><tr><td style="text-align:left;"><em>float</em></td><td style="text-align:left;">Number (single)</td><td style="text-align:left;">Float Real</td><td style="text-align:left;">Number</td><td style="text-align:left;">Float</td><td style="text-align:left;">Numeric</td></tr><tr><td style="text-align:left;"><em>currency</em></td><td style="text-align:left;">Currency</td><td style="text-align:left;">Money</td><td style="text-align:left;">N/A</td><td style="text-align:left;">N/A</td><td style="text-align:left;">Money</td></tr><tr><td style="text-align:left;"><em>string (fixed)</em></td><td style="text-align:left;">N/A</td><td style="text-align:left;">Char</td><td style="text-align:left;">Char</td><td style="text-align:left;">Char</td><td style="text-align:left;">Char</td></tr><tr><td style="text-align:left;"><em>string (variable)</em></td><td style="text-align:left;">Text (&lt;256) Memo (65k+)</td><td style="text-align:left;">Varchar</td><td style="text-align:left;">Varchar Varchar2</td><td style="text-align:left;">Varchar</td><td style="text-align:left;">Varchar</td></tr><tr><td style="text-align:left;"><em>binary object</em></td><td style="text-align:left;">OLE Object Memo</td><td style="text-align:left;">Binary (fixed up to 8K) Varbinary (&lt;8K) Image (&lt;2GB)</td><td style="text-align:left;">Long Raw</td><td style="text-align:left;">Blob Text</td><td style="text-align:left;">Binary Varbinary</td></tr></tbody></table><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>💡 <strong>注释</strong>：在不同的数据库中，同一种数据类型可能有不同的名称。即使名称相同，尺寸和其他细节也可能不同！<strong>请总是检查文档！</strong></p></div><h2 id="sql-用于各种数据库的数据类型" tabindex="-1"><a class="header-anchor" href="#sql-用于各种数据库的数据类型"><span>SQL 用于各种数据库的数据类型</span></a></h2><h3 id="_1-microsoft-access-数据类型" tabindex="-1"><a class="header-anchor" href="#_1-microsoft-access-数据类型"><span>1 Microsoft Access 数据类型</span></a></h3><table><thead><tr><th style="text-align:left;">数据类型</th><th style="text-align:left;">描述</th><th style="text-align:left;">存储</th></tr></thead><tbody><tr><td style="text-align:left;">Text</td><td style="text-align:left;">用于文本或文本与数字的组合。最多 255 个字符。</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">Memo</td><td style="text-align:left;">Memo 用于更大数量的文本。最多存储 65,536 个字符。**注释：**无法对 memo 字段进行排序。不过它们是可搜索的。</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">Byte</td><td style="text-align:left;">允许 0 到 255 的数字。</td><td style="text-align:left;">1 字节</td></tr><tr><td style="text-align:left;">Integer</td><td style="text-align:left;">允许介于 -32,768 与 32,767 之间的全部数字。</td><td style="text-align:left;">2 字节</td></tr><tr><td style="text-align:left;">Long</td><td style="text-align:left;">允许介于 -2,147,483,648 与 2,147,483,647 之间的全部数字。</td><td style="text-align:left;">4 字节</td></tr><tr><td style="text-align:left;">Single</td><td style="text-align:left;">单精度浮点。处理大多数小数。</td><td style="text-align:left;">4 字节</td></tr><tr><td style="text-align:left;">Double</td><td style="text-align:left;">双精度浮点。处理大多数小数。</td><td style="text-align:left;">8 字节</td></tr><tr><td style="text-align:left;">Currency</td><td style="text-align:left;">用于货币。支持 15 位的元，外加 4 位小数。**提示：**您可以选择使用哪个国家的货币。</td><td style="text-align:left;">8 字节</td></tr><tr><td style="text-align:left;">AutoNumber</td><td style="text-align:left;">AutoNumber 字段自动为每条记录分配数字，通常从 1 开始。</td><td style="text-align:left;">4 字节</td></tr><tr><td style="text-align:left;">Date/Time</td><td style="text-align:left;">用于日期和时间</td><td style="text-align:left;">8 字节</td></tr><tr><td style="text-align:left;">Yes/No</td><td style="text-align:left;">逻辑字段，可以显示为 Yes/No、True/False 或 On/Off。在代码中，使用常量 True 和 False （等价于 1 和 0）。**注释：**Yes/No 字段中不允许 Null 值</td><td style="text-align:left;">1 比特</td></tr><tr><td style="text-align:left;">Ole Object</td><td style="text-align:left;">可以存储图片、音频、视频或其他 BLOBs（Binary Large OBjects）。</td><td style="text-align:left;">最多 1GB</td></tr><tr><td style="text-align:left;">Hyperlink</td><td style="text-align:left;">包含指向其他文件的链接，包括网页。</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">Lookup Wizard</td><td style="text-align:left;">允许您创建一个可从下拉列表中进行选择的选项列表。</td><td style="text-align:left;">4 字节</td></tr></tbody></table><h3 id="_2-mysql-数据类型" tabindex="-1"><a class="header-anchor" href="#_2-mysql-数据类型"><span>2 MySQL 数据类型</span></a></h3><p>在 MySQL 中，有三种主要的类型：Text（文本）、Number（数字）和 Date / Time（日期/时间）类型。</p>`,83)),l(o,null,{default:a(()=>[l(i,{title:"Text 类型"},{default:a(()=>e[34]||(e[34]=[t("table",null,[t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"数据类型"),t("th",{style:{"text-align":"left"}},"描述")])]),t("tbody",null,[t("tr",null,[t("td",{style:{"text-align":"left"}},"CHAR(size)"),t("td",{style:{"text-align":"left"}},"保存固定长度的字符串（可包含字母、数字以及特殊字符）。在括号中指定字符串的长度。最多 255 个字符。")]),t("tr",null,[t("td",{style:{"text-align":"left"}},"VARCHAR(size)"),t("td",{style:{"text-align":"left"}},"保存可变长度的字符串（可包含字母、数字以及特殊字符）。在括号中指定字符串的最大长度。最多 255 个字符。**注释：**如果值的长度大于 255，则被转换为 TEXT 类型。")]),t("tr",null,[t("td",{style:{"text-align":"left"}},"TINYTEXT"),t("td",{style:{"text-align":"left"}},"存放最大长度为 255 个字符的字符串。")]),t("tr",null,[t("td",{style:{"text-align":"left"}},"TEXT"),t("td",{style:{"text-align":"left"}},"存放最大长度为 65,535 个字符的字符串。")]),t("tr",null,[t("td",{style:{"text-align":"left"}},"BLOB"),t("td",{style:{"text-align":"left"}},"用于 BLOBs（Binary Large OBjects）。存放最多 65,535 字节的数据。")]),t("tr",null,[t("td",{style:{"text-align":"left"}},"MEDIUMTEXT"),t("td",{style:{"text-align":"left"}},"存放最大长度为 16,777,215 个字符的字符串。")]),t("tr",null,[t("td",{style:{"text-align":"left"}},"MEDIUMBLOB"),t("td",{style:{"text-align":"left"}},"用于 BLOBs（Binary Large OBjects）。存放最多 16,777,215 字节的数据。")]),t("tr",null,[t("td",{style:{"text-align":"left"}},"LONGTEXT"),t("td",{style:{"text-align":"left"}},"存放最大长度为 4,294,967,295 个字符的字符串。")]),t("tr",null,[t("td",{style:{"text-align":"left"}},"LONGBLOB"),t("td",{style:{"text-align":"left"}},"用于 BLOBs (Binary Large OBjects)。存放最多 4,294,967,295 字节的数据。")]),t("tr",null,[t("td",{style:{"text-align":"left"}},"ENUM(x,y,z,etc.)"),t("td",{style:{"text-align":"left"}},"允许您输入可能值的列表。可以在 ENUM 列表中列出最大 65535 个值。如果列表中不存在插入的值，则插入空值。**注释：**这些值是按照您输入的顺序排序的。可以按照此格式输入可能的值： ENUM('X','Y','Z')")]),t("tr",null,[t("td",{style:{"text-align":"left"}},"SET"),t("td",{style:{"text-align":"left"}},"与 ENUM 类似，不同的是，SET 最多只能包含 64 个列表项且 SET 可存储一个以上的选择。")])])],-1)])),_:1,__:[34]}),l(i,{title:"Number 类型"},{default:a(()=>e[35]||(e[35]=[t("table",null,[t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"数据类型"),t("th",{style:{"text-align":"left"}},"描述")])]),t("tbody",null,[t("tr",null,[t("td",{style:{"text-align":"left"}},"TINYINT(size)"),t("td",{style:{"text-align":"left"}},"带符号-128到127 ，无符号0到255。")]),t("tr",null,[t("td",{style:{"text-align":"left"}},"SMALLINT(size)"),t("td",{style:{"text-align":"left"}},"带符号范围-32768到32767，无符号0到65535, size 默认为 6。")]),t("tr",null,[t("td",{style:{"text-align":"left"}},"MEDIUMINT(size)"),t("td",{style:{"text-align":"left"}},"带符号范围-8388608到8388607，无符号的范围是0到16777215。 size 默认为9")]),t("tr",null,[t("td",{style:{"text-align":"left"}},"INT(size)"),t("td",{style:{"text-align":"left"}},"带符号范围-2147483648到2147483647，无符号的范围是0到4294967295。 size 默认为 11")]),t("tr",null,[t("td",{style:{"text-align":"left"}},"BIGINT(size)"),t("td",{style:{"text-align":"left"}},"带符号的范围是-9223372036854775808到9223372036854775807，无符号的范围是0到18446744073709551615。size 默认为 20")]),t("tr",null,[t("td",{style:{"text-align":"left"}},"FLOAT(size,d)"),t("td",{style:{"text-align":"left"}},"带有浮动小数点的小数字。在 size 参数中规定显示最大位数。在 d 参数中规定小数点右侧的最大位数。")]),t("tr",null,[t("td",{style:{"text-align":"left"}},"DOUBLE(size,d)"),t("td",{style:{"text-align":"left"}},"带有浮动小数点的大数字。在 size 参数中规显示定最大位数。在 d 参数中规定小数点右侧的最大位数。")]),t("tr",null,[t("td",{style:{"text-align":"left"}},"DECIMAL(size,d)"),t("td",{style:{"text-align":"left"}},"作为字符串存储的 DOUBLE 类型，允许固定的小数点。在 size 参数中规定显示最大位数。在 d 参数中规定小数点右侧的最大位数。")])])],-1),t("div",{class:"custom-container tip"},[t("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[t("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[t("circle",{cx:"12",cy:"12",r:"9"}),t("path",{d:"M12 8h.01"}),t("path",{d:"M11 12h1v4h1"})])]),t("p",{class:"custom-container-title"},"TIP"),t("p",null,[t("strong",null,"注意"),s("：以上的 size 代表的并不是存储在数据库中的具体长度，如 int(4) 并不是只能存储 4 个长度的数字。")]),t("p",null,"实际上 int(size) 所占多少存储空间并无任何关系。int(3)、int(4)、int(8) 在磁盘上都是占用 4 bytes 的存储空间。就是在显示给用户的方式有点不同外，int(M) 跟 int 数据类型是相同的。"),t("p",null,"例如："),t("p",null,"1、int 的值为10 （指定 zerofill）"),t("div",{class:"language-sql line-numbers-mode","data-highlighter":"prismjs","data-ext":"sql","data-title":"sql"},[t("pre",null,[t("code",null,[t("span",{class:"line"},[t("span",{class:"token keyword"},"int"),s("（"),t("span",{class:"token number"},"9"),s("）显示结果为"),t("span",{class:"token number"},"000000010")]),s(`
`),t("span",{class:"line"},[t("span",{class:"token keyword"},"int"),s("（"),t("span",{class:"token number"},"3"),s("）显示结果为"),t("span",{class:"token number"},"010")]),s(`
`),t("span",{class:"line"})])]),t("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[t("div",{class:"line-number"}),t("div",{class:"line-number"})])]),t("p",null,"就是显示的长度不一样而已 都是占用四个字节的空间。")],-1)])),_:1,__:[35]}),e[37]||(e[37]=t("p",null,":::",-1)),l(i,{title:"Date 类型"},{default:a(()=>e[36]||(e[36]=[t("table",null,[t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"数据类型"),t("th",{style:{"text-align":"left"}},"描述")])]),t("tbody",null,[t("tr",null,[t("td",{style:{"text-align":"left"}},"DATE()"),t("td",{style:{"text-align":"left"}},"日期。格式：YYYY-MM-DD**注释：**支持的范围是从 '1000-01-01' 到 '9999-12-31'")]),t("tr",null,[t("td",{style:{"text-align":"left"}},"DATETIME()"),t("td",{style:{"text-align":"left"}},"*日期和时间的组合。格式：YYYY-MM-DD HH:MM:SS**注释：**支持的范围是从 '1000-01-01 00:00:00' 到 '9999-12-31 23:59:59'")]),t("tr",null,[t("td",{style:{"text-align":"left"}},"TIMESTAMP()"),t("td",{style:{"text-align":"left"}},"*时间戳。TIMESTAMP 值使用 Unix 纪元('1970-01-01 00:00:00' UTC) 至今的秒数来存储。格式：YYYY-MM-DD HH:MM:SS**注释：**支持的范围是从 '1970-01-01 00:00:01' UTC 到 '2038-01-09 03:14:07' UTC")]),t("tr",null,[t("td",{style:{"text-align":"left"}},"TIME()"),t("td",{style:{"text-align":"left"}},"时间。格式：HH:MM:SS**注释：**支持的范围是从 '-838:59:59' 到 '838:59:59'")]),t("tr",null,[t("td",{style:{"text-align":"left"}},"YEAR()"),t("td",{style:{"text-align":"left"}},"2 位或 4 位格式的年。**注释：**4 位格式所允许的值：1901 到 2155。2 位格式所允许的值：70 到 69，表示从 1970 到 2069。")])])],-1),t("blockquote",null,[t("p",null,"*即便 DATETIME 和 TIMESTAMP 返回相同的格式，它们的工作方式很不同。在 INSERT 或 UPDATE 查询中，TIMESTAMP 自动把自身设置为当前的日期和时间。TIMESTAMP 也接受不同的格式，比如 YYYYMMDDHHMMSS、YYMMDDHHMMSS、YYYYMMDD 或 YYMMDD。")],-1)])),_:1,__:[36]})]),_:1,__:[37]}),e[47]||(e[47]=t("h3",{id:"_3-sql-server-数据类型",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_3-sql-server-数据类型"},[t("span",null,"3 SQL Server 数据类型")])],-1)),l(o,null,{default:a(()=>[l(i,{title:"String 类型"},{default:a(()=>e[38]||(e[38]=[t("table",null,[t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}}),t("th",{style:{"text-align":"left"}}),t("th",{style:{"text-align":"left"}})])]),t("tbody",null,[t("tr",null,[t("td",{style:{"text-align":"left"}},"数据类型"),t("td",{style:{"text-align":"left"}},"描述"),t("td",{style:{"text-align":"left"}},"存储")]),t("tr",null,[t("td",{style:{"text-align":"left"}},"char(n)"),t("td",{style:{"text-align":"left"}},"固定长度的字符串。最多 8,000 个字符。"),t("td",{style:{"text-align":"left"}},"Defined width")]),t("tr",null,[t("td",{style:{"text-align":"left"}},"varchar(n)"),t("td",{style:{"text-align":"left"}},"可变长度的字符串。最多 8,000 个字符。"),t("td",{style:{"text-align":"left"}},"2 bytes + number of chars")]),t("tr",null,[t("td",{style:{"text-align":"left"}},"varchar(max)"),t("td",{style:{"text-align":"left"}},"可变长度的字符串。最多 1,073,741,824 个字符。"),t("td",{style:{"text-align":"left"}},"2 bytes + number of chars")]),t("tr",null,[t("td",{style:{"text-align":"left"}},"text"),t("td",{style:{"text-align":"left"}},"可变长度的字符串。最多 2GB 文本数据。"),t("td",{style:{"text-align":"left"}},"4 bytes + number of chars")]),t("tr",null,[t("td",{style:{"text-align":"left"}},"nchar"),t("td",{style:{"text-align":"left"}},"固定长度的 Unicode 字符串。最多 4,000 个字符。"),t("td",{style:{"text-align":"left"}},"Defined width x 2")]),t("tr",null,[t("td",{style:{"text-align":"left"}},"nvarchar"),t("td",{style:{"text-align":"left"}},"可变长度的 Unicode 字符串。最多 4,000 个字符。"),t("td",{style:{"text-align":"left"}})]),t("tr",null,[t("td",{style:{"text-align":"left"}},"nvarchar(max)"),t("td",{style:{"text-align":"left"}},"可变长度的 Unicode 字符串。最多 536,870,912 个字符。"),t("td",{style:{"text-align":"left"}})]),t("tr",null,[t("td",{style:{"text-align":"left"}},"ntext"),t("td",{style:{"text-align":"left"}},"可变长度的 Unicode 字符串。最多 2GB 文本数据。"),t("td",{style:{"text-align":"left"}})]),t("tr",null,[t("td",{style:{"text-align":"left"}},"bit"),t("td",{style:{"text-align":"left"}},"允许 0、1 或 NULL"),t("td",{style:{"text-align":"left"}})]),t("tr",null,[t("td",{style:{"text-align":"left"}},"binary(n)"),t("td",{style:{"text-align":"left"}},"固定长度的二进制字符串。最多 8,000 字节。"),t("td",{style:{"text-align":"left"}})]),t("tr",null,[t("td",{style:{"text-align":"left"}},"varbinary"),t("td",{style:{"text-align":"left"}},"可变长度的二进制字符串。最多 8,000 字节。"),t("td",{style:{"text-align":"left"}})]),t("tr",null,[t("td",{style:{"text-align":"left"}},"varbinary(max)"),t("td",{style:{"text-align":"left"}},"可变长度的二进制字符串。最多 2GB。"),t("td",{style:{"text-align":"left"}})]),t("tr",null,[t("td",{style:{"text-align":"left"}},"image"),t("td",{style:{"text-align":"left"}},"可变长度的二进制字符串。最多 2GB。"),t("td",{style:{"text-align":"left"}})])])],-1)])),_:1,__:[38]}),l(i,{title:"Number 类型"},{default:a(()=>e[39]||(e[39]=[t("table",null,[t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"数据类型"),t("th",{style:{"text-align":"left"}},"描述"),t("th",{style:{"text-align":"left"}},"存储")])]),t("tbody",null,[t("tr",null,[t("td",{style:{"text-align":"left"}},"tinyint"),t("td",{style:{"text-align":"left"}},"允许从 0 到 255 的所有数字。"),t("td",{style:{"text-align":"left"}},"1 字节")]),t("tr",null,[t("td",{style:{"text-align":"left"}},"smallint"),t("td",{style:{"text-align":"left"}},"允许介于 -32,768 与 32,767 的所有数字。"),t("td",{style:{"text-align":"left"}},"2 字节")]),t("tr",null,[t("td",{style:{"text-align":"left"}},"int"),t("td",{style:{"text-align":"left"}},"允许介于 -2,147,483,648 与 2,147,483,647 的所有数字。"),t("td",{style:{"text-align":"left"}},"4 字节")]),t("tr",null,[t("td",{style:{"text-align":"left"}},"bigint"),t("td",{style:{"text-align":"left"}},"允许介于 -9,223,372,036,854,775,808 与 9,223,372,036,854,775,807 之间的所有数字。"),t("td",{style:{"text-align":"left"}},"8 字节")]),t("tr",null,[t("td",{style:{"text-align":"left"}},"decimal(p,s)"),t("td",{style:{"text-align":"left"}},"固定精度和比例的数字。允许从 -10^38 +1 到 10^38 -1 之间的数字。p 参数指示可以存储的最大位数（小数点左侧和右侧）。p 必须是 1 到 38 之间的值。默认是 18。s 参数指示小数点右侧存储的最大位数。s 必须是 0 到 p 之间的值。默认是 0。"),t("td",{style:{"text-align":"left"}},"5-17 字节")]),t("tr",null,[t("td",{style:{"text-align":"left"}},"numeric(p,s)"),t("td",{style:{"text-align":"left"}},"固定精度和比例的数字。允许从 -10^38 +1 到 10^38 -1 之间的数字。p 参数指示可以存储的最大位数（小数点左侧和右侧）。p 必须是 1 到 38 之间的值。默认是 18。s 参数指示小数点右侧存储的最大位数。s 必须是 0 到 p 之间的值。默认是 0。"),t("td",{style:{"text-align":"left"}},"5-17 字节")]),t("tr",null,[t("td",{style:{"text-align":"left"}},"smallmoney"),t("td",{style:{"text-align":"left"}},"介于 -214,748.3648 与 214,748.3647 之间的货币数据。"),t("td",{style:{"text-align":"left"}},"4 字节")]),t("tr",null,[t("td",{style:{"text-align":"left"}},"money"),t("td",{style:{"text-align":"left"}},"介于 -922,337,203,685,477.5808 与 922,337,203,685,477.5807 之间的货币数据。"),t("td",{style:{"text-align":"left"}},"8 字节")]),t("tr",null,[t("td",{style:{"text-align":"left"}},"float(n)"),t("td",{style:{"text-align":"left"}},"从 -1.79E + 308 到 1.79E + 308 的浮动精度数字数据。n 参数指示该字段保存 4 字节还是 8 字节。float(24) 保存 4 字节，而 float(53) 保存 8 字节。n 的默认值是 53。"),t("td",{style:{"text-align":"left"}},"4 或 8 字节")]),t("tr",null,[t("td",{style:{"text-align":"left"}},"real"),t("td",{style:{"text-align":"left"}},"从 -3.40E + 38 到 3.40E + 38 的浮动精度数字数据。"),t("td",{style:{"text-align":"left"}},"4 字节")])])],-1)])),_:1,__:[39]}),l(i,{title:"Date 类型"},{default:a(()=>e[40]||(e[40]=[t("table",null,[t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"数据类型"),t("th",{style:{"text-align":"left"}},"描述"),t("th",{style:{"text-align":"left"}},"存储")])]),t("tbody",null,[t("tr",null,[t("td",{style:{"text-align":"left"}},"datetime"),t("td",{style:{"text-align":"left"}},"从 1753 年 1 月 1 日 到 9999 年 12 月 31 日，精度为 3.33 毫秒。"),t("td",{style:{"text-align":"left"}},"8 字节")]),t("tr",null,[t("td",{style:{"text-align":"left"}},"datetime2"),t("td",{style:{"text-align":"left"}},"从 1753 年 1 月 1 日 到 9999 年 12 月 31 日，精度为 100 纳秒。"),t("td",{style:{"text-align":"left"}},"6-8 字节")]),t("tr",null,[t("td",{style:{"text-align":"left"}},"smalldatetime"),t("td",{style:{"text-align":"left"}},"从 1900 年 1 月 1 日 到 2079 年 6 月 6 日，精度为 1 分钟。"),t("td",{style:{"text-align":"left"}},"4 字节")]),t("tr",null,[t("td",{style:{"text-align":"left"}},"date"),t("td",{style:{"text-align":"left"}},"仅存储日期。从 0001 年 1 月 1 日 到 9999 年 12 月 31 日。"),t("td",{style:{"text-align":"left"}},"3 bytes")]),t("tr",null,[t("td",{style:{"text-align":"left"}},"time"),t("td",{style:{"text-align":"left"}},"仅存储时间。精度为 100 纳秒。"),t("td",{style:{"text-align":"left"}},"3-5 字节")]),t("tr",null,[t("td",{style:{"text-align":"left"}},"datetimeoffset"),t("td",{style:{"text-align":"left"}},"与 datetime2 相同，外加时区偏移。"),t("td",{style:{"text-align":"left"}},"8-10 字节")]),t("tr",null,[t("td",{style:{"text-align":"left"}},"timestamp"),t("td",{style:{"text-align":"left"}},"存储唯一的数字，每当创建或修改某行时，该数字会更新。timestamp 值基于内部时钟，不对应真实时间。每个表只能有一个 timestamp 变量。"),t("td",{style:{"text-align":"left"}})])])],-1)])),_:1,__:[40]}),l(i,{title:"其他数据类型"},{default:a(()=>e[41]||(e[41]=[t("table",null,[t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"数据类型"),t("th",{style:{"text-align":"left"}},"描述")])]),t("tbody",null,[t("tr",null,[t("td",{style:{"text-align":"left"}},"sql_variant"),t("td",{style:{"text-align":"left"}},"存储最多 8,000 字节不同数据类型的数据，除了 text、ntext 以及 timestamp。")]),t("tr",null,[t("td",{style:{"text-align":"left"}},"uniqueidentifier"),t("td",{style:{"text-align":"left"}},"存储全局唯一标识符 (GUID)。")]),t("tr",null,[t("td",{style:{"text-align":"left"}},"xml"),t("td",{style:{"text-align":"left"}},"存储 XML 格式化数据。最多 2GB。")]),t("tr",null,[t("td",{style:{"text-align":"left"}},"cursor"),t("td",{style:{"text-align":"left"}},"存储对用于数据库操作的指针的引用。")]),t("tr",null,[t("td",{style:{"text-align":"left"}},"table"),t("td",{style:{"text-align":"left"}},"存储结果集，供稍后处理。")])])],-1)])),_:1,__:[41]})]),_:1})])}const G=p(u,[["render",j]]),W=JSON.parse('{"path":"/docs/SQL/SQL_Use/2_SQL_AdvancedTutorials/6-SQL_AdvancedTutorials.html","title":"SQL高级教程（六）","lang":"en-US","frontmatter":{"title":"SQL高级教程（六）","date":"2024/12/13"},"headers":[{"level":2,"title":"SQL 视图（Views）","slug":"sql-视图-views","link":"#sql-视图-views","children":[{"level":3,"title":"1 SQL CREATE VIEW 语句","slug":"_1-sql-create-view-语句","link":"#_1-sql-create-view-语句","children":[]},{"level":3,"title":"2 SQL CREATE VIEW 实例","slug":"_2-sql-create-view-实例","link":"#_2-sql-create-view-实例","children":[]},{"level":3,"title":"3 SQL 更新视图","slug":"_3-sql-更新视图","link":"#_3-sql-更新视图","children":[]},{"level":3,"title":"4 SQL 撤销视图","slug":"_4-sql-撤销视图","link":"#_4-sql-撤销视图","children":[]}]},{"level":2,"title":"SQL Date 函数","slug":"sql-date-函数","link":"#sql-date-函数","children":[{"level":3,"title":"1 MySQL Date 函数","slug":"_1-mysql-date-函数","link":"#_1-mysql-date-函数","children":[]},{"level":3,"title":"2 SQL Server Date 函数","slug":"_2-sql-server-date-函数","link":"#_2-sql-server-date-函数","children":[]},{"level":3,"title":"3 SQL Date 数据类型","slug":"_3-sql-date-数据类型","link":"#_3-sql-date-数据类型","children":[]},{"level":3,"title":"4 SQL 日期处理","slug":"_4-sql-日期处理","link":"#_4-sql-日期处理","children":[]}]},{"level":2,"title":"SQL NULL 值","slug":"sql-null-值","link":"#sql-null-值","children":[{"level":3,"title":"1 SQL NULL 值","slug":"_1-sql-null-值","link":"#_1-sql-null-值","children":[]},{"level":3,"title":"2 SQL 的 NULL 值处理","slug":"_2-sql-的-null-值处理","link":"#_2-sql-的-null-值处理","children":[]},{"level":3,"title":"3 SQL IS NULL","slug":"_3-sql-is-null","link":"#_3-sql-is-null","children":[]},{"level":3,"title":"4 SQL IS NOT NULL","slug":"_4-sql-is-not-null","link":"#_4-sql-is-not-null","children":[]}]},{"level":2,"title":"SQL NULL 函数","slug":"sql-null-函数","link":"#sql-null-函数","children":[{"level":3,"title":"SQL ISNULL()、NVL()、IFNULL() 和 COALESCE() 函数","slug":"sql-isnull-、nvl-、ifnull-和-coalesce-函数","link":"#sql-isnull-、nvl-、ifnull-和-coalesce-函数","children":[]}]},{"level":2,"title":"SQL 通用数据类型","slug":"sql-通用数据类型","link":"#sql-通用数据类型","children":[{"level":3,"title":"1 SQL 通用数据类型","slug":"_1-sql-通用数据类型","link":"#_1-sql-通用数据类型","children":[]},{"level":3,"title":"2 SQL 数据类型快速参考手册","slug":"_2-sql-数据类型快速参考手册","link":"#_2-sql-数据类型快速参考手册","children":[]}]},{"level":2,"title":"SQL 用于各种数据库的数据类型","slug":"sql-用于各种数据库的数据类型","link":"#sql-用于各种数据库的数据类型","children":[{"level":3,"title":"1 Microsoft Access 数据类型","slug":"_1-microsoft-access-数据类型","link":"#_1-microsoft-access-数据类型","children":[]},{"level":3,"title":"2 MySQL 数据类型","slug":"_2-mysql-数据类型","link":"#_2-mysql-数据类型","children":[]},{"level":3,"title":"3 SQL Server 数据类型","slug":"_3-sql-server-数据类型","link":"#_3-sql-server-数据类型","children":[]}]}],"git":{"createdTime":1754894104000,"updatedTime":1754894104000,"contributors":[{"name":"chenkai","email":"1134596043@qq.com","commits":1}]},"filePathRelative":"docs/SQL/SQL_Use/2_SQL_AdvancedTutorials/6-SQL_AdvancedTutorials.md"}');export{G as comp,W as data};
